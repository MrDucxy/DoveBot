const fetch = require("node-fetch");
const subreddits = require("./subreddits.json");
const utf8 = require("utf8");

function randint(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
function choice(arr) {
  return arr[randint(0, arr.length - 1)];
}
async function getsubreddit(sr) {
  // logic: try to get another one if its unicode or smth until it finally works
  // if everything is right, there would not be performance issues
  // but, this prevents many errors
  let link = `https://www.reddit.com${sr}/random.json`;
  let r;
  for (let i = 0; i < 1; i++) {
    try {
      r = await fetch(utf8.encode(link));
      return r.json();
    } catch (err) {
      i--;
    }
  }
}

function formatredditres(r) {
  if (r === undefined) return undefined;
  let data = r[0].data.children[0].data;

  let newdata = {
    title: data.title,
    author: data.author,
    subreddit: data.subreddit_name_prefixed,
    permalink: "https://www.reddit.com" + data.permalink,
    media: data.url_overridden_by_dest,
    over_18: data.over_18,
  };
  return newdata;
}
class Trev {
  constructor(options) {
    try {
      this.verbose = options.verbose;
    } catch {
      this.verbose = true;
    }
    if (this.verbose) console.log("[+] Loading subreddit list | trev");
    this.subreddits = subreddits;
    this.nsfw = {};
    this.memes = {};
    // memes category comming soon, you can already see it in subreddits.json but its empty for the moment
    if (this.verbose) console.log("[+] Loading/creating functions | trev");
    let cat = Object.keys(this.subreddits);
    for (let i = 0; i < cat.length; i++) {
      let curcat = cat[i];
      for (var category in this.subreddits[curcat]) {
        // only way i found is with eval
        // can be super dangerous though
        // console.log(category);
        this[curcat][category] = eval(`
          async () => {
            let subreddit = choice(this.subreddits.${curcat}.${category});
            let r = await getsubreddit(subreddit);
            let tentatives = 0;
            while (r[0] === undefined && tentatives < 5) {
              let r = await getsubreddit(subreddit);
              tentatives++;
            }
            if (tentatives >= 5) {
              if(this.verbose) console.log("[-] Broken subreddit: " + subreddit);
              return undefined;
            }
            if (!r) return undefined;
            return formatredditres(r);
          }`);
      }
    }
    if (this.verbose) console.log("[+] Fully loaded | trev");
  }
  isImgurUpload(url) {
    return (
      (url.startsWith("https://imgur.com/") ||
        url.startsWith("https://www.imgur.com/")) &&
      (!url.startsWith("https://imgur.com/gallery") ||
        !url.startsWith("https://www.imgur.com/gallery"))
    );
  }
  getRawImgur(url) {
    if (!this.isImgurUpload(url)) return undefined;
    return "https://i." + url.slice("https://".length) + ".jpeg";
  }
  async getCustomSubreddit(subreddit) {
    if (!subreddit.startsWith("/r/")) {
      if (subreddit.startsWith("r/")) subreddit = "/" + subreddit;
      else subreddit = "/r/" + subreddit;
    }
    let r = await getsubreddit(subreddit);
    let tentatives = 0;
    while (r[0] === undefined && tentatives < 5) {
      let r = await getsubreddit(subreddit);
      tentatives++;
    }
    if (tentatives >= 5) {
      if (this.verbose) console.log("[-] Broken subreddit: " + subreddit);
      return undefined;
    }
    if (!r) return undefined;
    return formatredditres(r);
  }

  isGfyLink(url) {
    if (!url) return false;
    let urls = [
      "https://www.redgifs.com",
      "https://www.gfycat.com",
      "https://redgifs.com",
      "https://gfycat.com",
    ];
    for (let i = 0; i < urls.length; i++) {
      if (url.startsWith(urls[i])) return true;
    }
    return false;
  }
  gfyIframe(url) {
    let urls = [
      "https://www.redgifs.com",
      "https://www.gfycat.com",
      "https://redgifs.com",
      "https://gfycat.com",
    ];
    let urlstart;
    let name;
    for (let i = 0; i < urls.length; i++) {
      if (url.startsWith(urls[i])) {
        urlstart = urls[i];
        break;
      }
    }
    if (urlstart.includes("redgifs")) {
      // redgifs domain, +6 for /watch
      name = url.slice(urlstart.length + 6);
    } else {
      // gfycat domain, leave normal
      name = url.slice(urlstart.length);
    }
    return urlstart + "/ifr" + name;
  }
}

module.exports = new Trev();
